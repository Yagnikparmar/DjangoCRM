crm(customer relation management)
technologies: Django framework and mysql database

1)configuration and connect to the database:
  create another virtual envornment -> install django
  install mysql client library: pip install mysql
  install connecter: pip install mysql-connector-python
  install mysql : MySQL is a relational database management system (RDBMS) used to store and manage data in a structured format. 
                  It allows you to create, read, update, and delete data using SQL (Structured Query Language).
  create app called website
  
  Go to settings.py and configure
  change database setting 
  create mydb.py file for connectivity -> python mydb.py
  go to workbench->schemas (you can see database called crm)
  run command python manage.py migrate

'''
Django version control with git and github:

install git software from the web
git config --global user.name "Your Name"
git config --global user.email "you@youraddress.com"
git config --global push.default matching
git config --global alias.co checkout
git init
git add .
git commit -am 'intial commit'
go to github -> use repo commands 
{allset..}

push to git:
git add .
git commit -am 'you commit'
git push
'''
2) build app:
go to project urls.py -> got to app urls.py
go to views.py
create base.html in templates add bootstrap code block ,editing

3) django login user:
go to views.py
go to urls.py
go to views.py ADD LOGIC TO IT (basic logic) just authentication by django superuser detials

'''message function
In Python, you can't directly control the front-end behavior (like hiding an alert) because Python runs on the server-side, 
while JavaScript controls client-side behavior (browser interactions).
  <script>
    // Auto-hide the alert after 2 seconds
    setTimeout(function() {
      var alertElement = document.getElementById('autoHideAlert');
      if (alertElement) {
        alertElement.style.display = 'none';
      }
    }, 2000);  // 2000 milliseconds = 2 seconds
  </script>
'''


4) django logout user:
go to views.py and make logic for logout function log in page is in home page so no need to create another function
go to urls.py -> add some logic in navbar.py

5) Register Users:
we have to make a form(you can add users threw admin but for public you have make)
go to urls.py->go to views.py->make register html file and navbar.html (just render register.py file if user not logged in)
create forms.py for signup
go to views.py -> boom go to reigster.html and done stuffs

6) Database model:
make record model in models.py 
and use migration commands and after migrate the code pushed in database, you can see in mysql database

go to admin.py 
from .models import Record
admin.site.register(Record)

let's see in frontend
edit in view home page -> go to home.html -
table copy and paste in home 

8) customer recordS (SHOWING customer RECORD AND DELETE RECORD): url -> view -> page
adding bootstrap card in record.html
delete record button adding url -> views.py -> page

9) Adding record
urls.py->create html file-> create form in forms.html- > view.py -> page

10)Update record
urls.py ->create html file-> views -> page



all done! congratulation!!!

# Scaling project :

1) Added delete alert option using bottstrap  
